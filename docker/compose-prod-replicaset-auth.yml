version: "3.9"

x-common-variables:
  &env-vars
  PORT_API: 8080
  PORT_DEBUG: 5005

volumes:
  data1:
  data2:
  data3:
  log1:
  log2:
  log3:

networks:
  api_net:

services:
  mongo1:
    container_name: mongo1
    image: mongo:4.4.4
    restart: always
    command: [ "-f",
               "/etc/mongod.conf",
               "--port", "9042",
               "--keyFile", "/auth/keyfile.key",
               "--replSet","docker-rs", "--bind_ip_all" ]
    expose:
      - 9042
    ports:
      - "9042:9042"
    networks:
      - api_net
    volumes:
      - data1:/data/db
      - log1:/var/log/mongodb
      - ./replicaset-prod/config/initdb.d/:/docker-entrypoint-initdb.d/
      - ./replicaset-prod/config/mongod.conf:/etc/mongod.conf
      - ./replicaset-prod/config/keyfile.key:/auth/keyfile.key
    healthcheck:
      test: echo 'rs.status().ok' | mongo admin --port 9042 -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    env_file:
      - ./replicaset-prod/envs/auth_initdb_root.env
      - ./replicaset-prod/envs/auth_initdb.env
      - ./replicaset-prod/envs/general_rs.env

  mongo2:
    container_name: mongo2
    image: mongo:4.4.4
    restart: always
    command: [ "-f",
               "/etc/mongod.conf",
               "--port", "9142",
               "--keyFile", "/auth/keyfile.key",
               "--replSet","docker-rs", "--bind_ip_all" ]
#               "--replSet","${MONGO_REPLICA_SET_NAME}", "--bind_ip_all" ]
    expose:
      - 9142
    ports:
      - "9142:9142"
    networks:
      - api_net
    volumes:
      - data2:/data/db
      - log2:/var/log/mongodb
      - ./replicaset-prod/config/mongod.conf:/etc/mongod.conf
      - ./replicaset-prod/config/keyfile.key:/auth/keyfile.key
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    depends_on:
      - mongo1
    env_file:
      - ./replicaset-prod/envs/auth_initdb_root.env
      - ./replicaset-prod/envs/auth_initdb.env
      - ./replicaset-prod/envs/general_rs.env

  mongo3:
    container_name: mongo3
    image: mongo:4.4.4
    restart: always
    command: [ "-f",
               "/etc/mongod.conf",
               "--port", "9242",
               "--keyFile", "/auth/keyfile.key",
               "--replSet","docker-rs", "--bind_ip_all" ]
    expose:
      - 9242
    networks:
      - api_net
    volumes:
      - data3:/data/db
      - log3:/var/log/mongodb
      - ./replicaset-prod/config/mongod.conf:/etc/mongod.conf
      - ./replicaset-prod/config/keyfile.key:/auth/keyfile.key
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    depends_on:
      - mongo2
    env_file:
      - ./replicaset-prod/envs/auth_initdb_root.env
      - ./replicaset-prod/envs/auth_initdb.env
      - ./replicaset-prod/envs/general_rs.env

  replicaset-setup:
    container_name: replicaset-setup
    image: mongo:4.4.4
    restart: always
    command: bash -c "
      sleep 10 &&
      chmod +x /scripts/rs-setup.sh &&
      sleep 10 &&
      scripts/rs-setup.sh &&
      sleep 10 &&
      echo "127.0.0.1 localhost mongo1 mongo2 mongo3" >> /etc/hosts &&
      sleep 10 &&
      cat /etc/hosts &&
      sleep infinity"
#    entrypoint: [ "bash", "/scripts/rs-setup.sh" ]
    networks:
      - api_net
    volumes:
      - ./replicaset-prod/rs-setup.sh:/scripts/rs-setup.sh
    env_file:
      - ./replicaset-prod/envs/auth_initdb_root.env
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - mongo1
      - mongo2
      - mongo3

  api:
    container_name: api
    image: pauloportfolio/api
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        JAR_FILE: target/*.jar
    ports:
      - "8080:8080"
      - "5005:5005"
    networks:
      - api_net
    depends_on:
      - replicaset-setup
    env_file:
      - replicaset-prod/envs/general_rs.env
      - replicaset-prod/envs/auth_initdb_root.env
    environment:
      <<: *env-vars
      DEBUG_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xmx1G -Xms128m -XX:MaxMetaspaceSize=128m